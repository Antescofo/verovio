---
layout: verovio
verovio-light: true
title: Verovio Overview
active: how
how-active: how-overview
---

<div class="row">
    <div class="col-md-3 sidebar-offcanvas" id="sidebar" role="navigation">
        <div class="panel panel-default">
            {% include how-sidebar.html %}
        </div>
    </div>

    <div class="col-md-9">
        <div class="panel-body">
            <h3>Overview</h3>
            <p>Verovio is a C++ codebase that can be integrated into various environments.</p>

            <h4>Workflow</h4>
            <p><a href="python.xhtml">Python</a>, and <a href="command-line.xhtml">Command Line</a> toolkits are used server side. Typical use cases would be : </p>
            <ul>
              <li>generate SVG and MIDI from MEI documents or other supported formats,</li>
              <li>apply XSLT to transform existing MEI document.</li>
            </ul>
            <p>Resulting documents can then be embedded in a HTML page or used as such.</p>
            <object type="image/svg+xml" data="images/overview_server.svg" height="300">
              Python toolkit or command line interface can be used to read in input a mei or humdrum or plain and easy document, process a XSLT if necessary , and generate in output mei document, or a svg or a midi file. SVG and midi can then be embedded in a HTML document.
            </object>
            <br /><br />

            <p><a href="javascript.xhtml">Javascript toolkit</a> makes it possible to generate SVG and midi directly in the browser.<br /> Interaction with the user can then be handled with basic Javascript / CSS. <br />
            <a href="tutorial.xhtml?id=topic02">An example of how to handle events</a> is given in the tutorial.<br />
            It is easy to set up and platform independant. </p>
            <object type="image/svg+xml" data="images/overview_client.svg" height="300">
              Javascript toolkit oan be used in a html document to read a mei odocument, process a XSLT if necessary, and generate a svg or midi output in the html DOM.
            </object>
            <br /><br />

            <p>Both approaches can be combined : one may choose to generate SVG server side for better performance, and then handle interactions client side.</p>
             <object type="image/svg+xml" data="images/overview_hybrid1.svg" height="300">
              Server and client side approches can be
            </object>
            <br /><br />

            <p>Or MEI documents could be pre-processed server-side, and then transformed into SVG in the browser.</p>
             <object type="image/svg+xml" data="images/overview_hybrid2.svg" height="300">
              Python toolkit or command line interface can be used to read a mei or humdrum or plain and easy document, if necessary process a XSLT, and then generate another mei document, or a svg or a midi file. SVG and midi can then be embedded in a HTML document.
            </object>
            <br /><br />

        </div>
    </div>
</div>

<script type="text/javascript">
//<![CDATA[
    $( document ).ready(function() {

    });
//]]>
</script>
