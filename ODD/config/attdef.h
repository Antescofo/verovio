/*****EXISTING*DATATYPES*****//** * data_ACCIDENTAL_EXPLICIT */enum data_ACCIDENTAL_EXPLICIT {    ACCIDENTAL_EXPLICIT_NONE = 0,    ACCIDENTAL_EXPLICIT_s, // sharp    ACCIDENTAL_EXPLICIT_f, // flat    ACCIDENTAL_EXPLICIT_x, // double sharp (written using croix)    ACCIDENTAL_EXPLICIT_ff, // double flat    ACCIDENTAL_EXPLICIT_n, // natural    ACCIDENTAL_EXPLICIT_nf, // natural + flat; used to cancel preceding double flat    ACCIDENTAL_EXPLICIT_ns // natural + sharp; used to cancel preceding double sharp};/** * data_ACCIDENTAL_IMPLICIT */enum data_ACCIDENTAL_IMPLICIT {    ACCIDENTAL_IMPLICIT_NONE = 0,    ACCIDENTAL_IMPLICIT_s, // sharp    ACCIDENTAL_IMPLICIT_f, // flat    ACCIDENTAL_IMPLICIT_ss, // double sharp    ACCIDENTAL_IMPLICIT_ff, // double flat    ACCIDENTAL_IMPLICIT_n, // natural    ACCIDENTAL_IMPLICIT_su, // three quarter-tones sharp    ACCIDENTAL_IMPLICIT_sd, // quarter-tone sharp    ACCIDENTAL_IMPLICIT_fu, // quarter-tone flat    ACCIDENTAL_IMPLICIT_fd // three quarter-tones flat};/** * data_ARTICULATION */enum data_ARTICULATION {    ARTICULATION_NONE = 0,    ARTICULATION_acc, // accent (Unicode 1D17B)    ARTICULATION_stacc, // staccato (Unicode 1D17C)    ARTICULATION_ten, // tenuto (Unicode 1D17D)    ARTICULATION_stacciss, // staccatissimo (Unicode 1D17E)    ARTICULATION_marc, // marcato (Unicode 1D17F)    ARTICULATION_marc-stacc, // marcato + staccato (Unicode 1D180)    ARTICULATION_spicc, // spiccato    ARTICULATION_doit, // main note followed by short slide to higher, indeterminate pitch (Unicode 1D185)    ARTICULATION_rip, // main note preceded by short slide from lower, indeterminate pitch (Unicode 1D186)    ARTICULATION_plop, // main note preceded by "slide" from higher, indeterminate pitch    ARTICULATION_fall, // main note followed by long "slide" to lower, indeterminate pitch    ARTICULATION_bend, // "lip slur" to lower pitch, then return to written pitch    ARTICULATION_flip, // main note followed by quick upward rise, then descent in pitch (Unicode 1D187)    ARTICULATION_smear, // (Unicode 1D188)    ARTICULATION_dnbow, // down bow (Unicode 1D1AA)    ARTICULATION_upbow, // up bow (Unicode 1D1AB)    ARTICULATION_harm, // harmonic (Unicode 1D1AC)    ARTICULATION_snap, // snap pizzicato (Unicode 1D1AD)    ARTICULATION_fingernail, // fingernail (Unicode 1D1B3)    ARTICULATION_ten-stacc, // tenuto + staccato (Unicode 1D182)    ARTICULATION_damp, // dampen harp string (Unicode 1D1B4)    ARTICULATION_dampall, // dampen all harp strings (Unicode 1D1B5)    ARTICULATION_open, // full (as opposed to stopped) tone    ARTICULATION_stop, // "muffled" tone    ARTICULATION_dbltongue, // double tongue (Unicode 1D18A)    ARTICULATION_trpltongue, // triple tongue (Unicode 1D18B)    ARTICULATION_heel, // use heel (organ pedal)    ARTICULATION_toe, // use toe (organ pedal)    ARTICULATION_tap, // percussive effect on guitar string(s)    ARTICULATION_lhpizz, // left-hand pizzicato    ARTICULATION_dot, // uninterpreted dot    ARTICULATION_stroke // uninterpreted stroke};/** * data_BARPLACE */enum data_BARPLACE {    BARPLACE_NONE = 0,    BARPLACE_mensur, // between staves only    BARPLACE_staff, // between and across staves as necessary    BARPLACE_takt // short line above staff or through top line};/** * data_BARRENDITION */enum data_BARRENDITION {    BARRENDITION_NONE = 0,    BARRENDITION_dbl, // (Unicode 1D101)    BARRENDITION_end, // (Unicode 1D102)    BARRENDITION_rptstart, // repeat start (Unicode 1D106)    BARRENDITION_rptboth, // repeat start and end    BARRENDITION_rptend, // repeat end (Unicode 1D107)    BARRENDITION_single // (Unicode 1D100)};/** * data_BEATRPT_REND */enum data_BEATRPT_REND {    BEATRPT_REND_NONE = 0,};/** * data_BEND_AMOUNT */enum data_BEND_AMOUNT {    BEND_AMOUNT_NONE = 0,};/** * data_BOOLEAN */enum data_BOOLEAN {    BOOLEAN_NONE = 0,    BOOLEAN_true, //     BOOLEAN_false // };/** * data_CLEFSHAPE */enum data_CLEFSHAPE {    CLEFSHAPE_NONE = 0,    CLEFSHAPE_G, // G clef (Unicode 1D11E)    CLEFSHAPE_GG, // Double G clef    CLEFSHAPE_F, // F clef (Unicode 1D122)    CLEFSHAPE_C, // C clef (Unicode 1D121)    CLEFSHAPE_perc, // Drum clef (Unicode 1D125 or Unicode 1D126)    CLEFSHAPE_TAB // tablature "clef"; i.e. usually "TAB" rendered vertically};/** * data_CLUSTER */enum data_CLUSTER {    CLUSTER_NONE = 0,    CLUSTER_whbox, // unfilled box    CLUSTER_blbox // filled box};/** * data_COLOR */enum data_COLOR {    COLOR_NONE = 0,    COLOR_aqua, //     COLOR_black, //     COLOR_blue, //     COLOR_fuchsia, //     COLOR_gray, //     COLOR_green, //     COLOR_lime, //     COLOR_maroon, //     COLOR_navy, //     COLOR_olive, //     COLOR_purple, //     COLOR_red, //     COLOR_silver, //     COLOR_teal, //     COLOR_white, //     COLOR_yellow // };/** * data_CURVERENDITION */enum data_CURVERENDITION {    CURVERENDITION_NONE = 0,    CURVERENDITION_narrow, // default line width    CURVERENDITION_medium, // twice as wide as normal    CURVERENDITION_wide, // twice as wide as medium    CURVERENDITION_dashed, // dashed    CURVERENDITION_dotted // dotted};/** * data_DURATION_gestural */enum data_DURATION_gestural {    DURATION_gestural_NONE = 0,};/** * data_ENCLOSURE */enum data_ENCLOSURE {    ENCLOSURE_NONE = 0,    ENCLOSURE_paren, // parentheses    ENCLOSURE_brack // square brackets};/** * data_FONTSTYLE */enum data_FONTSTYLE {    FONTSTYLE_NONE = 0,    FONTSTYLE_italic, // text slants to right    FONTSTYLE_normal, // unadorned    FONTSTYLE_oblique // text slants to the left};/** * data_FONTWEIGHT */enum data_FONTWEIGHT {    FONTWEIGHT_NONE = 0,    FONTWEIGHT_bold, //     FONTWEIGHT_normal // };/** * data_GLISSANDO */enum data_GLISSANDO {    GLISSANDO_NONE = 0,    GLISSANDO_i, // first note/chord in glissando    GLISSANDO_m, // note/chord that's neither first nor last in glissando    GLISSANDO_t // last note in glissando};/** * data_GRACE */enum data_GRACE {    GRACE_NONE = 0,    GRACE_acc, // time "stolen" from following note    GRACE_unacc, // time "stolen" from previous note    GRACE_unknown // no interpretation regarding performed value of grace note};/** * data_HEADSHAPE */enum data_HEADSHAPE {    HEADSHAPE_NONE = 0,    HEADSHAPE_quarter, // filled oval (Unicode 1D158)    HEADSHAPE_half, // open oval (Unicode 1D157)    HEADSHAPE_whole, // open oval (Unicode 1D15D)    HEADSHAPE_dblwhole, // modern breve (Unicode 1D15C)    HEADSHAPE_filldiamond, // filled diamond (Unicode 1D1BA)    HEADSHAPE_diamond, // open diamond (Unicode 1D1B9)    HEADSHAPE_dwdiamond, // double whole diamond (Mup)    HEADSHAPE_fillisotriangle, // filled isosceles triangle (Unicode 1D149)    HEADSHAPE_isotriangle, // open isosceles triangle (Unicode 1D148)    HEADSHAPE_dwhisotriangle, // double whole open isosceles triangle (Unicode 1D14E)    HEADSHAPE_fillpiewedge, // filled downward-pointing wedge (Unicode 1D155)    HEADSHAPE_piewedge, // downward-pointing wedge (Unicode 1D154)    HEADSHAPE_dwhpiewedge, // double whole downward-pointing wedge (Mup)    HEADSHAPE_fillrectangle, // filled rectangle (Unicode 1D147)    HEADSHAPE_rectangle, // open rectangle (Unicode 1D146)    HEADSHAPE_dwhrectangle, // double whole open rectangle (Mup)    HEADSHAPE_fillrtriangle, // filled right triangle (Unicode 1D14B)    HEADSHAPE_rtriangle, // open right triangle (Unicode 1D14A)    HEADSHAPE_dwrtriangle, // double whole right triangle (Mup)    HEADSHAPE_fillurtriangle, // filled upper right triangle (Unicode 1D151)    HEADSHAPE_urtriangle, // open upper right triangle (Unicode 1D150)    HEADSHAPE_dwurtriangle, // double whole upper right triangle    HEADSHAPE_fillsemicircle, // filled semi-circle (Unicode 1D153)    HEADSHAPE_semicircle, // open semi-circle (Unicode 1D152)    HEADSHAPE_dwsemicircle, // double whole open semi-circle (Mup)    HEADSHAPE_fillslash, // filled slash (Mup)    HEADSHAPE_slash, // open slash (Mup)    HEADSHAPE_dwslash, // double whole open slash (Mup)    HEADSHAPE_x, // X (Unicode 1D143)    HEADSHAPE_blank, // note head not rendered (Unicode 1D159)    HEADSHAPE_circlex, // X within circle (Unicode 1D145)    HEADSHAPE_cross, // plus sign (Unicode 1D144)    HEADSHAPE_addslash, // added diagonal slash (/) through default note head    HEADSHAPE_addbackslash (MusicXML) // added diagonal backslash (\) through default note head (MusicXML)};/** * data_ISODATE */enum data_ISODATE {    ISODATE_NONE = 0,};/** * data_LAYERSCHEME */enum data_LAYERSCHEME {    LAYERSCHEME_NONE = 0,    LAYERSCHEME_1, // single layer    LAYERSCHEME_2o, // two layers with opposing stems    LAYERSCHEME_2f, // two layers with 'floating' stems    LAYERSCHEME_3o, //     LAYERSCHEME_3f // };/** * data_LIGATUREFORM */enum data_LIGATUREFORM {    LIGATUREFORM_NONE = 0,    LIGATUREFORM_recta, // notes are "squeezed" together    LIGATUREFORM_obliqua // individual notes are replaced by an oblique figure};/** * data_LINERENDITION */enum data_LINERENDITION {    LINERENDITION_NONE = 0,    LINERENDITION_narrow, // default line width    LINERENDITION_medium, // twice as wide as narrow    LINERENDITION_wide, // twice as wide as medium    LINERENDITION_dashed, // dashed line    LINERENDITION_dotted, // dotted line    LINERENDITION_wavy // undulating line};/** * data_MENSURATIONSIGN */enum data_MENSURATIONSIGN {    MENSURATIONSIGN_NONE = 0,    MENSURATIONSIGN_C, // tempus imperfectum    MENSURATIONSIGN_O // tempus perfectum};/** * data_METERSIGN */enum data_METERSIGN {    METERSIGN_NONE = 0,    METERSIGN_common, // common time; i.e. 4/4    METERSIGN_cut // cut time; i.e. 2/2};/** * data_MODE */enum data_MODE {    MODE_NONE = 0,    MODE_major, //     MODE_minor, //     MODE_dorian, //     MODE_phrygian, //     MODE_lydian, //     MODE_mixolydian, //     MODE_aeolian, //     MODE_locrian // };/** * data_OTHERSTAFF */enum data_OTHERSTAFF {    OTHERSTAFF_NONE = 0,    OTHERSTAFF_above, //     OTHERSTAFF_below // };/** * data_PGSCALE */enum data_PGSCALE {    PGSCALE_NONE = 0,};/** * data_PLACE */enum data_PLACE {    PLACE_NONE = 0,    PLACE_above, //     PLACE_below // };/** * data_SIZE */enum data_SIZE {    SIZE_NONE = 0,    SIZE_normal, // default size    SIZE_cue // reduced size};/** * data_STAFFREL */enum data_STAFFREL {    STAFFREL_NONE = 0,    STAFFREL_above, // written above staff    STAFFREL_below, // written below staff    STAFFREL_within // written on staff};/** * data_STEMDIRECTION */enum data_STEMDIRECTION {    STEMDIRECTION_NONE = 0,    STEMDIRECTION_up, // stem points upward    STEMDIRECTION_down // stem points downward};/** * data_STEMMODIFIER */enum data_STEMMODIFIER {    STEMMODIFIER_NONE = 0,    STEMMODIFIER_1slash, // 1 slash through stem    STEMMODIFIER_2slash, // 2 slashes through stem    STEMMODIFIER_3slash, // 3 slashes through stem    STEMMODIFIER_4slash, // 4 slashes through stem    STEMMODIFIER_5slash, // 5 slashes through stem    STEMMODIFIER_6slash, // 6 slashes through stem    STEMMODIFIER_sprech, // X placed on stem    STEMMODIFIER_z // Z placed on stem};/** * data_STEMPOSITION */enum data_STEMPOSITION {    STEMPOSITION_NONE = 0,    STEMPOSITION_left, // stem attached to left side of note head    STEMPOSITION_right, // stem attached to right side of note head    STEMPOSITION_center // stem is originates from center of note head};/** * data_TEMPERAMENT */enum data_TEMPERAMENT {    TEMPERAMENT_NONE = 0,    TEMPERAMENT_equal, // equal or 12-tone temperament    TEMPERAMENT_just, // just intonation    TEMPERAMENT_mean, // meantone intonation    TEMPERAMENT_pythagorean // pythagorean tuning};/** * macro_musicPart */enum macro_musicPart {    macro_musicPart_NONE = 0,};/*****GENERATED*DATATYPES*****//** * (generated) data_BEAM_REND */enum data_BEAM_REND {    BEAM_REND_NONE = 0,    BEAM_REND_acc, // beams lines grow farther apart from left to right.    BEAM_REND_rit, // beam lines grow closer together from left to right.    BEAM_REND_norm // beam lines are equally-spaced over the entire length of the beam.};/** * (generated) data_CURVEDIR */enum data_CURVEDIR {    CURVEDIR_NONE = 0,    CURVEDIR_above, // upward curve.    CURVEDIR_below // downward curve.};/** * (generated) data_FORM */enum data_FORM {    FORM_NONE = 0,    FORM_aug, // augmentation dot.    FORM_div // dot of division.};/** * (generated) data_HALIGN */enum data_HALIGN {    HALIGN_NONE = 0,    HALIGN_left, // left aligned.    HALIGN_right, // right aligned.    HALIGN_center, // centered.    HALIGN_justify // left and right aligned.};/** * (generated) data_UNIT */enum data_UNIT {    UNIT_NONE = 0,    UNIT_cm, // centimeter.    UNIT_mm, // millimeter.    UNIT_in, // inch.    UNIT_issue, // serial issue.    UNIT_page, // page.    UNIT_px, // pixel.    UNIT_pt, // point.    UNIT_pc, // pica.    UNIT_vu, // MEI virtual unit.    UNIT_vol // serial volume.};/** * (generated) data_MEIVERSION */enum data_MEIVERSION {    MEIVERSION_NONE = 0,    MEIVERSION_2013 // this version of MEI.};/** * (generated) data_MEIVERSION_NUM */enum data_MEIVERSION_NUM {    MEIVERSION_NUM_NONE = 0,    MEIVERSION_NUM_2.1.1 // this version of MEI.};/** * (generated) data_METCON */enum data_METCON {    METCON_NONE = 0,    METCON_c, // conformant with the prevailing meter.    METCON_i, // incomplete; i.e., not enough beats.    METCON_o // overfull; i.e., too many beats.};/** * (generated) data_REND */enum data_REND {    REND_NONE = 0,    REND_num, // show only the number of beats.    REND_denomsym, // the lower number in the meter signature is replaced by a note symbol.    REND_norm, // meter signature rendered using traditional numeric values.    REND_invis // meter signature not rendered.};/** * (generated) data_METER_REND */enum data_METER_REND {    METER_REND_NONE = 0,    METER_REND_num, // show only the number of beats.    METER_REND_denomsym, // the lower number in the meter signature is replaced by a note symbol.    METER_REND_norm, // meter signature rendered using traditional numeric values.    METER_REND_invis // meter signature not rendered.};/** * (generated) data_FUNC */enum data_FUNC {    FUNC_NONE = 0,    FUNC_verso, //     FUNC_recto // };/** * (generated) data_EVALUATE */enum data_EVALUATE {    EVALUATE_NONE = 0,    EVALUATE_all, // if the element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.    EVALUATE_one, // if the element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.    EVALUATE_none // no further evaluation of targets is carried out beyond that needed to find the element specified in the pointer's target.};/** * (generated) data_XLINK:ACTUATE */enum data_XLINK:ACTUATE {    XLINK:ACTUATE_NONE = 0,    XLINK:ACTUATE_onLoad, // load the target resource immediately.    XLINK:ACTUATE_onRequest, // load the target resource upon user request.    XLINK:ACTUATE_none, // do not permit loading of the target resource.    XLINK:ACTUATE_other // behavior other than allowed by the other values of this attribute.};/** * (generated) data_XLINK:SHOW */enum data_XLINK:SHOW {    XLINK:SHOW_NONE = 0,    XLINK:SHOW_new, // open in a new window.    XLINK:SHOW_replace, // load the referenced resource in the same window.    XLINK:SHOW_embed, // embed the referenced resource at the point of the link.    XLINK:SHOW_none, // do not permit traversal to the referenced resource.    XLINK:SHOW_other // behavior other than permitted by the other values of this attribute.};/** * (generated) data_REND */enum data_REND {    REND_NONE = 0,    REND_hash // display hash marks between systems.};/** * (generated) data_ENDING_REND */enum data_ENDING_REND {    ENDING_REND_NONE = 0,    ENDING_REND_top, // ending rendered only above top staff.    ENDING_REND_barred, // ending rendered above staves that have bar lines drawn across them.    ENDING_REND_grouped // endings rendered above staff groups.};/** * (generated) data_SYMBOL */enum data_SYMBOL {    SYMBOL_NONE = 0,    SYMBOL_brace, // curved symbol, i.e., {.    SYMBOL_bracket, // square symbol, i.e., [.    SYMBOL_line, // line symbol, i.e., |.    SYMBOL_none // grouping symbol missing.};/** * (generated) data_CON */enum data_CON {    CON_NONE = 0,    CON_s, // space (word separator).    CON_d, // dash (syllable separator).    CON_u, // underscore (syllable extension).    CON_t, // tilde (syllable elision).    CON_c, // circumflex [angled line above] (syllable elision).    CON_v, // caron [angled line below] (syllable elision).    CON_i, // inverted breve [curved line above] (syllable elision).    CON_b // breve [curved line below] (syllable elision).};/** * (generated) data_WORDPOS */enum data_WORDPOS {    WORDPOS_NONE = 0,    WORDPOS_i, // (initial) first syllable.    WORDPOS_m, // (medial) neither first nor last syllable.    WORDPOS_t // (terminal) last syllable.};/** * (generated) data_XML:SPACE */enum data_XML:SPACE {    XML:SPACE_NONE = 0,    XML:SPACE_default, // allows the application to handle white space as necessary. Not including an xml:space attribute produces the same result as using the default value.    XML:SPACE_preserve // instructs the application to maintain white space "as-is", suggesting that it might have meaning.};/** * (generated) data_REL */enum data_REL {    REL_NONE = 0,    REL_preceding, // predecessor of the resource    REL_succeeding, // successor to the resource    REL_original, // original form of the resource    REL_host, // parent containing the resource    REL_constituent, // intellectual or physical component of the resource    REL_otherVersion, // version of the resource's intellectual content not changed enough to be a different work    REL_otherFormat, // version of the resource in a different physical format    REL_isReferencedBy, // published bibliographic description, review, abstract, or index of the resource's content    REL_references // cited or referred to in the resource};/** * (generated) data_METHOD */enum data_METHOD {    METHOD_NONE = 0,    METHOD_silent, // corrections and normalizations made silently.    METHOD_tags // corrections and normalizations indicated using elements.};/** * (generated) data_CORRLEVEL */enum data_CORRLEVEL {    CORRLEVEL_NONE = 0,    CORRLEVEL_high, // the text has been thoroughly checked and proofread.    CORRLEVEL_medium, // the text has been checked at least once.    CORRLEVEL_low, // the text has not been checked.    CORRLEVEL_unknown // the correction status of the text is unknown.};/** * (generated) data_FORM */enum data_FORM {    FORM_NONE = 0,    FORM_plaineAndEasie, // Plaine & Easie Code.    FORM_humdrumKern, // Humdrum Kern format.    FORM_parsons // Parsons code.};/** * (generated) data_TYPE */enum data_TYPE {    TYPE_NONE = 0,    TYPE_music, // header is attached to a music document.    TYPE_corpus // header is attached to a corpus.};/** * (generated) data_REND */enum data_REND {    REND_NONE = 0,    REND_acc, // (accelerando) indicates that the secondary beams get progressively closer together toward the end of the beam.    REND_mixed, // (mixed acc and rit) for beams that are "feathered" in both directions.    REND_rit, // (ritardando) means that the secondary beams become progressively more distance toward the end of the beam.    REND_norm // (normal) indicates that the secondary beams are equidistant along the course of the beam.};/** * (generated) data_CUTOUT */enum data_CUTOUT {    CUTOUT_NONE = 0,    CUTOUT_cutout // the staff lines should not be drawn.};/** * (generated) data_FORM */enum data_FORM {    FORM_NONE = 0,    FORM_inv, // inverted, i.e., curve or bracket below the dot.    FORM_norm // upright; i.e., curve or bracket above the dot.};/** * (generated) data_SHAPE */enum data_SHAPE {    SHAPE_NONE = 0,    SHAPE_curved, // a curve above or below the dot.    SHAPE_square // a bracket above or below the dot.};/** * (generated) data_COLL */enum data_COLL {    COLL_NONE = 0,    COLL_coll // coll' ottava (with the octave).};/** * (generated) data_PEDAL_STYLE */enum data_PEDAL_STYLE {    PEDAL_STYLE_NONE = 0,    PEDAL_STYLE_line, // continuous line with start and end positions rendered by vertical bars and bounces shown by upward-pointing "blips".    PEDAL_STYLE_pedstar, // pedal down and half pedal rendered with "Ped.", pedal up rendered by "*", pedal "bounce" rendered with "* Ped.".    PEDAL_STYLE_altpedstar // pedal up and down indications same as with "pedstar", but bounce is rendered with "Ped." only.};/** * (generated) data_REH_ENCLOSE */enum data_REH_ENCLOSE {    REH_ENCLOSE_NONE = 0,    REH_ENCLOSE_box, // enclosed by box.    REH_ENCLOSE_circle, // enclosed by circle.    REH_ENCLOSE_none // no enclosing shape.};/** * (generated) data_NUM_FORMAT */enum data_NUM_FORMAT {    NUM_FORMAT_NONE = 0,    NUM_FORMAT_count, // only the num attribute is displayed, e.g., '7'.    NUM_FORMAT_ratio // both the num and numbase attributes are displayed, e.g., '7:4'.};/** * (generated) data_FORM */enum data_FORM {    FORM_NONE = 0,    FORM_horizontal, //     FORM_vertical // };/** * (generated) data_MENSUR_FORM */enum data_MENSUR_FORM {    MENSUR_FORM_NONE = 0,    MENSUR_FORM_horizontal, //     MENSUR_FORM_vertical // };/** * (generated) data_LIG */enum data_LIG {    LIG_NONE = 0,    LIG_recta, //     LIG_obliqua // };