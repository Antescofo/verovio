<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../rng/tei_odds.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="../rng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<TEI xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Verovio: ODD Customization for MEI</title>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>

      <schemaSpec ident="mei" start="mei music" ns="http://www.music-encoding.org/ns/mei">
        <!-- workDesc can be added to @start to support physically
          separate work descriptions -->
        <moduleRef key="MEI"/>
        <moduleRef key="MEI.shared"
          include="accid barLine body chord clef custos dot keySig layer mdiv mei music note pb rest sb score scoreDef section staff staffDef staffGrp syl"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.cmn" include="beam measure meterSig mRest multiRest slur tie tuplet"/>
        <moduleRef key="MEI.mensural" include="mensur"/>
        <!--<moduleRef key="MEI.neumes" except="ineume syllable uneume"/>-->
        <!--<moduleRef key="MEI.analysis"/>-->
        <!--<moduleRef key="MEI.cmnOrnaments"/>-->
        <!--<moduleRef key="MEI.corpus"/>-->
        <!--<moduleRef key="MEI.critapp" />-->
        <!--<moduleRef key="MEI.edittrans"/>-->
        <!--<moduleRef key="MEI.facsimile"/>-->
        <!--<moduleRef key="MEI.figtable"/>-->
        <!--<moduleRef key="MEI.frbr"/>-->
        <!--<moduleRef key="MEI.harmony"/>-->
        <!--<moduleRef key="MEI.linkalign"/>-->
        <moduleRef key="MEI.lyrics" include="verse"/>
        <!--<moduleRef key="MEI.midi"/>-->
        <!--<moduleRef key="MEI.namesdates"/>-->
        <!--<moduleRef key="MEI.performance"/>-->
        <!--<moduleRef key="MEI.ptrref"/>-->
        <!--<moduleRef key="MEI.tablature"/>-->
        <!--<moduleRef key="MEI.text"/>-->
        <!--<moduleRef key="MEI.usersymbols"/>-->


        <!-- DATA Types -->
        <!--<macroSpec ident="data.ACCIDENTAL.EXPLICIT" module="MEI" type="dt" mode="replace">
          <desc>Accidental attribute values.</desc>
          <content>
            <rng:choice>
              <rng:value>s</rng:value>
              <a:documentation>sharp</a:documentation>
              <rng:value>f</rng:value>
              <a:documentation>flat</a:documentation>
              <!-\-<rng:value>ss</rng:value>
              <a:documentation>double sharp (written as 2 sharps)</a:documentation>-\->
              <rng:value>x</rng:value>
              <a:documentation>double sharp (written using croix)</a:documentation>
              <rng:value>ff</rng:value>
              <a:documentation>double flat</a:documentation>
              <!-\-<rng:value>xs</rng:value>
              <a:documentation>triple sharp (written as croix and 2 sharps)</a:documentation>-\->
              <!-\-<rng:value>ts</rng:value>
              <a:documentation>triple sharp (written as 3 sharps)</a:documentation>-\->
              <!-\-<rng:value>tf</rng:value>
              <a:documentation>triple flat</a:documentation>-\->
              <rng:value>n</rng:value>
              <a:documentation>natural</a:documentation>
              <rng:value>nf</rng:value>
              <a:documentation>natural + flat; used to cancel preceding double
                flat</a:documentation>
              <rng:value>ns</rng:value>
              <a:documentation>natural + sharp; used to cancel preceding double
                sharp</a:documentation>
              <!-\-<rng:value>su</rng:value>
              <a:documentation>sharp note raised by quarter tone</a:documentation>-\->
              <!-\-<rng:value>sd</rng:value>
              <a:documentation>sharp note lowered by quarter tone</a:documentation>-\->
              <!-\-<rng:value>fu</rng:value>
              <a:documentation>flat note raised by quarter tone</a:documentation>-\->
              <!-\-<rng:value>fd</rng:value>
              <a:documentation>flat note lowered by quarter tone</a:documentation>-\->
              <!-\-<rng:value>nu</rng:value>
              <a:documentation>natural note raised by quarter tone</a:documentation>-\->
              <!-\-<rng:value>nd</rng:value>
              <a:documentation>natural note lowered by quarter tone</a:documentation>-\->
            </rng:choice>
          </content>
        </macroSpec>-->
        <!--<macroSpec ident="data.BARRENDITION" module="MEI" type="dt" mode="replace">
          <desc>Renderings of bar lines. Some values correspond to the Western Musical Symbols
            portion of the Unicode Standard.</desc>
          <content>
            <rng:choice>
              <!-\-<rng:value>dashed</rng:value>
              <a:documentation>dashed line (Unicode 1D104)</a:documentation>-\->
              <!-\-<rng:value>dotted</rng:value>
              <a:documentation>dotted line</a:documentation>-\->
              <rng:value>dbl</rng:value>
              <a:documentation>(Unicode 1D101)</a:documentation>
              <!-\-<rng:value>dbldashed</rng:value>
              <a:documentation>double dashed line</a:documentation>-\->
              <!-\-<rng:value>dbldotted</rng:value>
              <a:documentation>double dotted line</a:documentation>-\->
              <rng:value>end</rng:value>
              <a:documentation>(Unicode 1D102)</a:documentation>
              <!-\-<rng:value>invis</rng:value>
              <a:documentation>bar line not rendered</a:documentation>-\->
              <rng:value>rptstart</rng:value>
              <a:documentation>repeat start (Unicode 1D106)</a:documentation>
              <rng:value>rptboth</rng:value>
              <a:documentation>repeat start and end</a:documentation>
              <rng:value>rptend</rng:value>
              <a:documentation>repeat end (Unicode 1D107)</a:documentation>
              <rng:value>single</rng:value>
              <a:documentation>(Unicode 1D100)</a:documentation>
            </rng:choice>
          </content>
        </macroSpec>-->

        <!-- ATTRIBUTE CLASSES -->

        <!--<classSpec ident="att.barLine.log" module="MEI.shared" type="atts" mode="change">
          <desc>Logical domain attributes.</desc>
          <classes mode="replace">
            <!-\-<memberOf key="att.meterconformance.bar"/>-\->
          </classes>
          <attList>
            <attDef ident="rend" usage="opt">
              <desc>records the appearance and usually the function of the bar line.</desc>
              <datatype>
                <rng:ref name="data.BARRENDITION"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>-->

        <!-- ELEMENTS -->
        <!--<elementSpec ident="accid" module="MEI.shared" mode="change">
          <desc>(accidental) â€“ Records a temporary alteration to the pitch of a note. </desc>
          <classes mode="replace">
            <!-\-<memberOf key="att.id"/>-\->
            <memberOf key="att.staffloc.pitched"/>
            <memberOf key="model.noteModifierLike"/>
          </classes>
          <content>
            <rng:empty/>
          </content>
        </elementSpec>-->
      

      <!--<elementSpec ident="barLine" module="MEI.shared" mode="change">
        <desc>Vertical line drawn through one or more staves that divides musical notation into
          metrical units.</desc>
        <classes mode="replace">
          <!-\-<memberOf key="att.common"/>
          <memberOf key="att.facsimile"/>
          <memberOf key="att.pointing"/>-\->
          <memberOf key="att.barLine.log"/>
          <!-\-<memberOf key="att.barLine.vis"/>
          <memberOf key="att.barLine.ges"/>
          <memberOf key="att.barLine.anl"/>-\->
          <memberOf key="model.eventLike"/>
        </classes>
        <content>
          <rng:empty/>
        </content>
        <constraintSpec ident="Check_barLinetaktplace" scheme="isoschematron">
          <constraint>
            <sch:rule context="mei:barLine[@taktplace]">
              <sch:let name="staff" value="ancestor::mei:staff/@n"/>
              <sch:let name="staffpos"
                value="count(ancestor::mei:staff/preceding-sibling::mei:staff)
                + 1"/>
              <sch:assert
                test="number(@taktplace) &lt;= number(2 *
                preceding::mei:staffDef[@n=$staff and @lines][1]/@lines)"
              />
            </sch:rule>
          </constraint>
        </constraintSpec>
      </elementSpec>-->

      <!--<elementSpec ident="beam" module="MEI.cmn" mode="change">
        <desc>A container for a series of explicitly beamed events that begins and ends entirely
          within a measure.</desc>
        <classes mode="replace">
          <!-\-<memberOf key="att.common"/>
          <memberOf key="att.facsimile"/>
          <memberOf key="att.beam.log"/>
          <memberOf key="att.beam.vis"/>
          <memberOf key="att.beam.ges"/>
          <memberOf key="att.beam.anl"/>-\->
          <memberOf key="model.eventLike.cmn"/>
        </classes>
        <content>
          <rng:zeroOrMore>
            <rng:choice>
              <rng:ref name="model.eventLike"/>
              <rng:ref name="model.appLike"/>
              <rng:ref name="model.editLike"/>
              <rng:ref name="model.transcriptionLike"/>
            </rng:choice>
          </rng:zeroOrMore>
        </content>
        <constraintSpec ident="When_not_copyof_beam_content" scheme="isoschematron">
          <constraint>
            <sch:rule context="mei:beam[not(@copyof)]">
              <sch:assert
                test="count(descendant::*[local-name()='note' or local-name()='rest' or
                local-name()='chord' or local-name()='space']) &gt; 1"
                >A beam without a copyof attribute must have at least 2 note, rest, chord, or space
                descendants.</sch:assert>
            </sch:rule>
          </constraint>
        </constraintSpec>
      </elementSpec>-->

        <elementSpec ident="meiHead" module="MEI.header" mode="replace">
          <desc>(MEI header) â€“ Supplies the descriptive and declarative metadata prefixed to every
            MEI-conformant text. For Verovio, the contents of meiHead are not validated at all.</desc>
          <classes>
            <memberOf key="att.bibl"/>
            <memberOf key="att.common"/>
            <memberOf key="att.lang"/>
            <memberOf key="att.meiversion"/>
            <memberOf key="model.startLike.header"/>
          </classes>
          <content>
            <rng:zeroOrMore>
              <rng:element>
                <rng:anyName/>
              </rng:element>
            </rng:zeroOrMore>
          </content>
          <attList>
            <attDef ident="type" usage="opt">
              <desc>specifies the kind of document to which the header is attached, for example
                whether it is a corpus or individual text.</desc>
              <valList type="closed">
                <valItem ident="music">
                  <desc>header is attached to a music document.</desc>
                </valItem>
                <valItem ident="corpus">
                  <desc>header is attached to a corpus.</desc>
                </valItem>
              </valList>
            </attDef>
          </attList>
          <remarks>
            <p>For checkng compliance with Verovio, the contents of meiHead are not validated. </p>
          </remarks>
        </elementSpec>
  
        <elementSpec ident="score" module="MEI.cmn" mode="change">
          <constraintSpec ident="checkAccid" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="@accid">
                <sch:assert test=". = ('s','f','n','x','ff','ns','nf')"> Supported values for @accid
                  are 's','f','n','x','ff','ns','nf'. </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
          <constraintSpec ident="checkClefLine" scheme="isoschematron" mode="add">
            <constraint>
              <sch:rule context="@clef.line">
                <sch:let name="line" value="."/>
                <sch:let name="shape" value="parent::mei:*/@mei:shape"/>
                <sch:assert
                  test="($line = ('1','2','3','4','5') and $shape = 'C') or ($line = ('1','2') and $shape = 'G') or ($line = ('3','4','5') and $shape = 'F')"
                  > Supported values are 1-5 for shape 'C', 1-2 for shape 'G', and 3-5 for shape 'F'.
                </sch:assert>
              </sch:rule>
            </constraint>
          </constraintSpec>
        </elementSpec>
      </schemaSpec>
    </body>
    <back>
      <head>Technical Details about datatypes in Verovio</head>
      <p>Only data types with specific defaults. Generic default values are auto-generated later.</p>
      <list>
        <head>defaults:</head>
        <label>int</label>
        <item>
          <list>
            <label>default</label>
            <item>0</item>
            <label>converters</label>
            <item>[StrToInt, IntToStr]</item>
          </list>
        </item>
        <label>char</label>
        <item>
          <list>
            <label>default</label>
            <item>0</item>
            <label>converters</label>
            <item>[StrToInt, IntToStr]</item>
          </list>
        </item>
        <label>double</label>
        <item>
          <list>
            <label>default</label>
            <item>0.0</item>
            <label>converters</label>
            <item>[StrToDbl, DblToStr]</item>
          </list>
        </item>
        <label>typedef_TSTAMP2</label>
        <item>
          <list>
            <label>default</label>
          <item>std::make_pair(-1,-1.0)</item>
            <label>converters</label>
          <item>[StrToTstamp2, Tstamp2ToStr]</item>
          </list>
        </item>
      </list>
    </back>
  </text>
</TEI>
